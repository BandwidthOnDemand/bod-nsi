<?xml version="1.0" encoding="UTF-8"?>
<!--
The OGF takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights.  Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the OGF Secretariat.

The OGF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to practice this recommendation.  Please address the information to the OGF Executive Director.

This document and the information contained herein is provided on an "As Is" basis and the OGF disclaims all warranties, express or implied, including but not limited to any warranty that the use of the information herein will not infringe any rights or any implied warranties of merchantability or fitness for a particular purpose.

Copyright (C) Open Grid Forum (2009-2011). All Rights Reserved.

This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the OGF or other organizations, except as needed for the purpose of developing Grid Recommendations in which case the procedures for copyrights defined in the OGF Document process must be followed, or as required to translate it into languages other than English.

The limited permissions granted above are perpetual and will not be revoked by the OGF or its successors or assignees.

Open Grid Forum NSI Connection Services Protocol v2.0

Description: This is a draft version of the WSDL common types and messages for the reference web services implementation of the OGF NSI Connection Services Protocol v2.0. Comments and questions can be directed to the mailing list group mailing list (nsi-wg@ogf.org).
-->
<wsdl:definitions name="ogf_nsi_connection_interface_v2_0"
    targetNamespace="http://schemas.ogf.org/nsi/2013/04/connection/interface"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:ftypes="http://schemas.ogf.org/nsi/2013/04/framework/types"
    xmlns:headers="http://schemas.ogf.org/nsi/2013/04/framework/headers"
    xmlns:types="http://schemas.ogf.org/nsi/2013/04/connection/types"
    xmlns:tns="http://schemas.ogf.org/nsi/2013/04/connection/interface">

    <!-- OGF NSI Connection Services Protocol 2.0 description -->
    <wsdl:documentation>
        This is an XML schema document describing the OGF NSI Connection
        Services protocol version 2.0. The Connection Service is message
        based command protocol that operates between a Requester
        Network Service Agent (NSA) and a Provider NSA. The protocol includes
        a set of defined primitives that are intended to provide the control
        necessary to manage the lifecycle of a connection reservation.
        
        There are nine primitives supported in this version of the
        protocol:
        
        1. Reserve - Make a request to reserve network resources for a
        connection between two STP's constrained by a certain service
        parameters or request a modification of an existing reservation.
        Any required resources will be pre-allocated and held until
        the commit of this reserve is received.
        
        3. ReserveCommit - Commit a previously allocated reservation
        or modification on a reservation.
        
        4. ReserveAbort - Cancel a pending reservation or modification
        and release any associated resources.
        
        5. Provision - Provider NSA has been given permission to setup a
        reservation (associated with a previous reserve message) on
        the Requester NSA's behalf but subject to the constraints of
        the requested service.
        
        6. Release - Provider NSA should release the provisioned resources
        without removing the reservation.
        
        7. Terminate - Provider NSA should release the provisioned resources
        and terminate the reservation.
        
        8. QuerySummary - Mechanism for either NSA to query the other NSA
        for a set of connection service instances between the RA-PA pair.
        The returned results will be a summary of the reservation
        information.
        
        9. QueryRecursive - Mechanism for either NSA to query the other
        NSA for a set of connection service instances between the RA-PA
        pair. The returned results will be a detailed list of reservation
        information collected by recursively traversing the reservation
        tree.
        
        10. QuerySummarySync - Mechanism for either NSA to query the other
        NSA for a set of connection service instances between the RA-PA
        pair. The returned results will be a summary of the reservation
        information.  This is a synchronous blocking operation and not
        asynchronous like QuerySummary and QueryRecursive.
        
        In addition, there are four notification primatives:
        
        1. errorEvent - An autonomous message issued from a Provider NSA to
        a Requester NSA when an existing reservation encounters an
        autonomous error condition such as being administratively terminated
        before the reservation's scheduled end-time.
        
        2. reserveTimeout -An autonomous message issued from a Provider NSA to
        a Requester NSA when a timeout on an existing reserve request occurs
        and uncommitted resources have been freed.
        
        3. dataPlaneStateChange - An autonomous message issued from a Provider
        NSA to a Requester NSA when a data plane state change event has occured
        within the network.

        4. messageDeliveryTimeout - Notification message for a message
        transport layer delivery timeout of an NSI CS request message.
        In the event of an MTL or Coordinator timeout, the Coordinator
        will generate this message delivery failure notification and
        send it up the workflow tree (towards the uRA).
        
        If the uRA wants to request a resend of the the original message
        it must issue the original operation again with the same
        correlationId. Aggregators receiving the request SHOULD only
        attempt redelivery of the message to children that it did not
        receive an acknowledgement for (i.e. MTL timeout) or reply to
        (i.e. Coordinator timeout) the original message.

        The Connection Service protocol is an asynchronous protocol where
        each primitive may consist of four operations:
        
        1. Request - A Requester NSA issues an operation request message
        such as "reserve" to the Provider NSA. The Requester NSA can
        expect an response to the request at some point in the future.
        
        2. Response - A Provider NSA may issue an immediate response
        to the Requester NSA providing needed progress information.
        For example, a requester NSA issuing a "reserve" request can
        expect a "reserveResponse" message providing the connectionId
        needed for querying reservation progress.
        
        3. Confirmed - A Provider NSA sends this positive operation
        response message (such as "reserveConfirmed") to the Requester
        NSA that issued the original request message ("reserveRequest").
        
        4. Failed - A Provider NSA sends this negative operation response
        message (such as "reserveFailed") to the Requester NSA that
        issued the original request message ("reserveRequest").
    
        Transport Bindings
        ------------------
        To fit this asynchronous NSI protocol into a synchronous SOAP
        over HTTP binding we require each of the Requester and Provider
        NSA to implement SOAP end points. Request messages are sent from
        the Requester NSA to the Provider NSA's SOAP end point, while
        Confirmed and Failed messages are sent from the Provider NSA to
        the Requester NSA SOAP end point. In addition, each of the
        Request, Confirmed, and Failed operations are defined with
        input (request), output (response or acknowledgment), and fault
        (error) messages as part of their WSDL definition. The output
        message, or response, for each operation is an element definition
        providing a simple acknowledgment with the request correlationId.
        
        Note on acknowledgment handling:
        Depending on NSA implementation and thread timing an acknowledgment to
        a request operation may be returned after the confirm/fail for the
        request has been returned to the Requesting NSA.
        
        For protocol robustness, Requesting NSA should be able to accept
        confirm/fail before acknowledgment.
    </wsdl:documentation>

    <wsdl:types>
        <xsd:schema targetNamespace="http://schemas.ogf.org/nsi/2013/04/connection/interface"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

            <!-- Import the common NSI framework types. -->
            <xsd:import namespace="http://schemas.ogf.org/nsi/2013/04/framework/types"
                schemaLocation="ogf_nsi_framework_types_v2_0.xsd"/>
            
            <!--  Import common NSI framework header types. -->
            <xsd:import namespace="http://schemas.ogf.org/nsi/2013/04/framework/headers"
                schemaLocation="ogf_nsi_framework_headers_v2_0.xsd" />
            
            <!--  Import common NSI Connection Services types from protocol schema. -->
            <xsd:import namespace="http://schemas.ogf.org/nsi/2013/04/connection/types"
                    schemaLocation="ogf_nsi_connection_types_v2_0.xsd" />
        </xsd:schema>
    </wsdl:types>

   <!-- *************************************************************
        *         NSI protocol WSDL message definitions.            *
        ************************************************************* -->

    <!-- ********** NSI message header ********** -->
    <message name="header">
        <part name="header" element="headers:nsiHeader"/>
    </message>
     
    <!-- ********** Reserve message set ********** -->
    <wsdl:message name="reserve">
        <wsdl:part name="reserve" element="types:reserve" />
    </wsdl:message>

    <wsdl:message name="reserveResponse">
        <wsdl:part name="reserveResponse" element="types:reserveResponse" />
    </wsdl:message>

    <wsdl:message name="reserveConfirmed">
        <wsdl:part name="reserveConfirmed" element="types:reserveConfirmed" />
    </wsdl:message>

    <wsdl:message name="reserveFailed">
        <wsdl:part name="reserveFailed" element="types:reserveFailed" />
    </wsdl:message>

    <!-- ********** ReserveCommit message set ********** -->
    <wsdl:message name="reserveCommit">
        <wsdl:part name="reserveCommit" element="types:reserveCommit" />
    </wsdl:message>
    
    <wsdl:message name="reserveCommitConfirmed">
        <wsdl:part name="reserveCommitConfirmed" element="types:reserveCommitConfirmed" />
    </wsdl:message>
    
    <wsdl:message name="reserveCommitFailed">
        <wsdl:part name="reserveCommitFailed" element="types:reserveCommitFailed" />
    </wsdl:message>
 
    <!-- ********** ReserveAbort message set ********** -->
    <wsdl:message name="reserveAbort">
        <wsdl:part name="reserveAbort" element="types:reserveAbort" />
    </wsdl:message>
    
    <wsdl:message name="reserveAbortConfirmed">
        <wsdl:part name="reserveAbortConfirmed" element="types:reserveAbortConfirmed" />
    </wsdl:message>
    
    <!-- ********** Provision message set ********** -->
    <wsdl:message name="provision">
        <wsdl:part name="provision" element="types:provision" />
    </wsdl:message>

    <wsdl:message name="provisionConfirmed">
        <wsdl:part name="provisionConfirmed" element="types:provisionConfirmed" />
    </wsdl:message>

    <!-- ********** Release message set ********** -->
    <wsdl:message name="release">
        <wsdl:part name="release" element="types:release" />
    </wsdl:message>

    <wsdl:message name="releaseConfirmed">
        <wsdl:part name="releaseConfirmed" element="types:releaseConfirmed" />
    </wsdl:message>

    <!-- ********** Terminate message set ********** -->
    <wsdl:message name="terminate">
        <wsdl:part name="parameters" element="types:terminate" />
    </wsdl:message>

    <wsdl:message name="terminateConfirmed">
        <wsdl:part name="parameters" element="types:terminateConfirmed" />
    </wsdl:message>

    <!-- ********** QuerySummary message set ********** -->
    <wsdl:message name="querySummary">
        <wsdl:part name="querySummary" element="types:querySummary" />
    </wsdl:message>
    
    <wsdl:message name="querySummaryConfirmed">
        <wsdl:part name="querySummaryConfirmed" element="types:querySummaryConfirmed" />
    </wsdl:message>

    <wsdl:message name="querySummaryFailed">
        <wsdl:part name="querySummaryFailed" element="types:querySummaryFailed" />
    </wsdl:message>

    <!-- ********** QueryRecursive message set ********** -->
    <wsdl:message name="queryRecursive">
        <wsdl:part name="queryRecursive" element="types:queryRecursive" />
    </wsdl:message>
    
    <wsdl:message name="queryRecursiveConfirmed">
        <wsdl:part name="queryRecursiveConfirmed" element="types:queryRecursiveConfirmed" />
    </wsdl:message>
    
    <wsdl:message name="queryRecursiveFailed">
        <wsdl:part name="queryRecursiveFailed" element="types:queryRecursiveFailed" />
    </wsdl:message>

    <!-- ********** QuerySummarySync message set ********** -->
    <wsdl:message name="querySummarySync">
        <wsdl:part name="querySummarySync" element="types:querySummarySync" />
    </wsdl:message>
    
    <wsdl:message name="querySummarySyncConfirmed">
        <wsdl:part name="querySummarySyncConfirmed" element="types:querySummarySyncConfirmed" />
    </wsdl:message>

    <wsdl:message name="querySummarySyncFailed">
        <wsdl:part name="querySummarySyncFailed" element="types:querySummarySyncFailed" />
    </wsdl:message>

    <!-- ********** Notification message set ********** -->
    <wsdl:message name="errorEvent">
        <wsdl:part name="errorEvent" element="types:errorEvent" />
    </wsdl:message>
    
    <wsdl:message name="reserveTimeout">
        <wsdl:part name="reserveTimeout" element="types:reserveTimeout" />
    </wsdl:message>

    <wsdl:message name="dataPlaneStateChange">
        <wsdl:part name="dataPlaneStateChange" element="types:dataPlaneStateChange" />
    </wsdl:message>
    
    <!-- ********** Acknowledgment message set ********** -->
    <wsdl:message name="acknowledgment">
        <wsdl:part name="acknowledgment" element="types:acknowledgment" />
    </wsdl:message>
    
    <!-- ********** MessageDeliveryFailure notification message set ********** -->
    <wsdl:message name="messageDeliveryTimeout">
        <wsdl:part name="messageDeliveryTimeout" element="types:messageDeliveryTimeout" />
    </wsdl:message>
    
    <!-- ********** Fault message set ********** -->
    <wsdl:message name="serviceException">
        <wsdl:part name="serviceException" element="types:serviceException"/>
    </wsdl:message>
</wsdl:definitions>
